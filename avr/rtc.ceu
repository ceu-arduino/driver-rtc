/*



*/
#include "../rtc.ceu"
#include "i2c.ceu"

native/pre do
    #include "rtc.h"
end


code/await Rtc_writeRegister8 (var u8 reg, var u8 value) -> none
do
    outer.twi_transmit_buffer = [reg,value];
    emit I2C_REQUEST_SEND({DS3231_ADDRESS});
    await I2C_REQUEST_DONE;
end

code/await Rtc_readRegister8 (var u8 reg) -> u8
do
    outer.twi_transmit_buffer = [reg];
    emit I2C_REQUEST_SEND({DS3231_ADDRESS});
    await I2C_REQUEST_DONE;
    emit I2C_REQUEST_RECEIVE(DS3231_ADDRESS, 1);
    await I2C_REQUEST_DONE;

    escape outer.twi_receive_buffer[0] as u8;
end

code/await Rtc (var on/off v) -> none
do
    if v then
        emit I2C(on,_);

        var u8 value = await Rtc_readRegister8({DS3231_REG_CONTROL});
        value = value & 59;
        await Rtc_writeRegister8({DS3231_REG_CONTROL},value);
    else
        emit I2C(off,_);
    end
end


code/await Rtc_get_time (var&[] u16 values) -> none
do
    outer.twi_transmit_buffer = [{DS3231_REG_TIME}];
    emit I2C_REQUEST_SEND({DS3231_ADDRESS});
    await I2C_REQUEST_DONE;

    emit I2C_REQUEST_RECEIVE({DS3231_ADDRESS}, 7);
    await I2C_REQUEST_DONE;

    var u8 i;
    loop i in [0->6] do
        values = values .. [{bcd2dec(@outer.twi_receive_buffer[i])}];
    end
    values[6]=values[6]+2000;    
end

code/await Rtc_set_time (var u16 year,var u8 month, var u8 day, var u8 hour, var u8 minute, var u8 second) -> none do
    outer.twi_transmit_buffer = [{DS3231_REG_TIME},{dec2bcd(@second)},{dec2bcd(@minute)},{dec2bcd(@hour)},{dec2bcd(dow(@year, @month, @day))},{dec2bcd(@day)},{dec2bcd(@month)},{dec2bcd(@year-2000)},{DS3231_REG_TIME}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{DS3231_REG_TIME}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@second)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@minute)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@hour)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(dow(@year, @month, @day))}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@day)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@month)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{dec2bcd(@year-2000)}];
    //outer.twi_transmit_buffer = outer.twi_transmit_buffer = .. [{DS3231_REG_TIME}];
    
    emit I2C_REQUEST_SEND({DS3231_ADDRESS});
    await I2C_REQUEST_DONE;
end




code/await Rtc_force_conversion (none) -> none
do
    var u8 value;
    value = await Rtc_readRegister8({DS3231_REG_CONTROL});
    value = value | (1<<5);
    await Rtc_writeRegister8({DS3231_REG_CONTROL}, value);
end

code/await Rtc_read_temperature (none) -> r32
do
    outer.twi_transmit_buffer = [{DS3231_REG_TEMPERATURE}];
    emit I2C_REQUEST_SEND({DS3231_ADDRESS});
    await I2C_REQUEST_DONE;

    emit I2C_REQUEST_RECEIVE({DS3231_ADDRESS}, 2);
    await I2C_REQUEST_DONE;
    escape ( (((outer.twi_receive_buffer[0] << 8) | outer.twi_receive_buffer[1]) >> 6) as r32) / 4.0;
end


// void DS3231::setDateTime(uint32_t t)
// {
//     t -= 946681200;

//     uint16_t year;
//     u8 month;
//     u8 day;
//     u8 hour;
//     u8 minute;
//     u8 second;

//     second = t % 60;
//     t /= 60;

//     minute = t % 60;
//     t /= 60;

//     hour = t % 24;
//     uint16_t days = t / 24;
//     u8 leap;

//     for (year = 0; ; ++year)
//     {
//         leap = year % 4 == 0;
//         if (days < 365 + leap)
//         {
//             break;
//         }
//         days -= 365 + leap;
//     }

//     for (month = 1; ; ++month)
//     {
//         u8 daysPerMonth = pgm_read_byte(daysArray + month - 1);

//         if (leap && month == 2)
//         {
//             ++daysPerMonth;
//         }

//         if (days < daysPerMonth)
//         {
//             break;
//         }
//         days -= daysPerMonth;
//     }

//     day = days + 1;

//     setDateTime(year+2000, month, day, hour, minute, second);
// }

// void DS3231::setDateTime(const char* date, const char* time)
// {
//     uint16_t year;
//     u8 month;
//     u8 day;
//     u8 hour;
//     u8 minute;
//     u8 second;

//     year = conv2d(date + 9);

//     switch (date[0])
//     {
//         case 'J': month = date[1] == 'a' ? 1 : month = date[2] == 'n' ? 6 : 7; break;
//         case 'F': month = 2; break;
//         case 'A': month = date[2] == 'r' ? 4 : 8; break;
//         case 'M': month = date[2] == 'r' ? 3 : 5; break;
//         case 'S': month = 9; break;
//         case 'O': month = 10; break;
//         case 'N': month = 11; break;
//         case 'D': month = 12; break;
//     }

//     day = conv2d(date + 4);
//     hour = conv2d(time);
//     minute = conv2d(time + 3);
//     second = conv2d(time + 6);

//     setDateTime(year+2000, month, day, hour, minute, second);
// }







